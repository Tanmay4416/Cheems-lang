program -> statements  {% id %}

statements
    ->  _ statement _  {%
            data => [data[1]]
        %}
    |   _ statement _ "\r" "\n" statements  {%
            data => [data[1], ...data[5]]
        %}

statement
    -> var_assignment  {% id %}
    | print_statement  {% id %}
    | while_loop        {% id %}

while_loop -> "jab-tak-vro" _ "(" _ binary_expression _ ")" _ "[" _ "\r" "\n" statements "\r" "\n" _ "]"  {%
            data => {
                return {
                    type: "while_loop",
                    condition: data[4],
                    body: data[12]
                }
            }
        %}

print_statement -> "bol-vro" _ "(" _ expression _ ")" {%
            data => {
                return {
                    type: "print_statement",
                    expression: data[4]
                }
            }
        %}

expression
    -> unary_expression {% id %}
    | binary_expression {% id %}

unary_expression
    -> number   {% id %}
    | identifier    {% id %}

binary_expression
    -> unary_expression _ operator _ expression {%
            data => {
                return {
                    type: "binary_expression",
                    left: data[0],
                    operator: data[2],
                    right: data[4]
                }
            }
        %}

operator
    -> "+"  {% id %}
    | "-"  {% id %}
    | "*"  {% id %}
    | "/"  {% id %}
    | ">"  {% id %}
    | "<"  {% id %}
    | ">="  {% id %}
    | "<="  {% id %}
    | "="  {% id %}

var_assignment -> "vro-ye-hai" __ identifier _ ":==" _ expression {%
            data => {
                return {
                    type: "var_assignment",
                    varname: data[2],
                    value: data[6]
                }
            }
        %}

identifier -> [a-z]:+ {%
        data => data[0].join("")
    %}

number 
    -> digits "." digits {%
            data => Number(data[0] + "." + data[2])
        %}
    | digits {%
            data => Number(data[0])
        %}

digits -> [0-9]:+ {%
        data => data[0].join("")
    %}

_ -> [ ]:*
__ -> [ ]:+
